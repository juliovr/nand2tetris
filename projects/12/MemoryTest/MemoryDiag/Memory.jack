// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array memory;
    static int HEAP;
    static int HEAP_LIMIT_ADDRESS;
    static Array freeList;
    
    /** Initializes the class. */
    function void init() {
        let memory = 0;
        let HEAP = 2048;
        let HEAP_LIMIT_ADDRESS = 16383;
        let freeList = HEAP; // set base address for freeList to heap
        let freeList[0] = HEAP_LIMIT_ADDRESS - HEAP - 2; // 2 for hold the freeList length and next segment pointer
        let freeList[1] = null;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array freeBlock, previousBlock;
        var int blockSize;
        var int i;
        var Array a;

        let previousBlock = null;
        let freeBlock = freeList;
        let blockSize = size + 1;
        
        if (~(freeList[0] < blockSize)) {
            let freeBlock = freeList;

            // Update freeList
            let freeList = freeList + blockSize;
            let freeList[0] = freeBlock[0] - blockSize; // Previous freeList size
            let freeList[1] = freeBlock[1];             // Previous freeList next-block pointer

            let freeBlock[0] = blockSize;
        } else {
            let freeBlock = freeList[1];
            while ((freeBlock[0] < blockSize) & ~(freeBlock[1] = null)) {
                let freeBlock = freeBlock[1];
            }
        }

        // Clear memory values
        let i = 1;
        while (i < blockSize) {
            let freeBlock[i] = 0;
            let i = i + 1;
        }

        return (freeBlock + 1);
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array freeBlock;
        let freeBlock = freeList;

        while (~(freeBlock[1] = null)) {
            let freeBlock = freeBlock[1];
        }

        let o[1] = null;
        let freeBlock[1] = o;
        
        return;
    }
}
