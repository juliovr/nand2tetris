// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int length;
    field int capacity;
    field Array s;
    
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let length = 0;
        let capacity = maxLength;
        if (maxLength > 0) {
            let s = Array.new(maxLength);
        }

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (~(s = 0)) {
            do s.dispose();
        }

        do Memory.deAlloc(this);
        
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return s[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let s[j] = c;

        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        //if (length < capacity) {
            let s[length] = c;
            let length = length + 1;
            //}

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {
            let length = length - 1;
            let s[length] = 0;
        }
        
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, i, digit, sign;
        
        let val = 0;
        let i = 0;
        let sign = 1;

        if ((length > 0) & (s[0] = 45)) {
            let sign = -1;
            let i = 1;
        }
        
        while (i < length) {
            if (((s[i] < 48) | (s[i] > 57))) {
                let i = length; // Simulate 'break'
            } else {
                let digit = (s[i] - 48); // 48 is ASCII character for '0'
                let val = (val * 10) + digit;
                
                let i = i + 1;
            }
        }

        return (val * sign);
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0; // Avoid using garbage characters leftover from previous static prints.
        
        if (val < 0) {
            do appendChar(45);
            let val = -val;
        }

        do addDigits(val);

        return;
    }

    method void addDigits(int val) {
        var int lastDigit, c, divided;
        
        let divided = val / 10;
        let lastDigit = val - (10 * divided);
        let c = (48 + lastDigit);
        
        if (val < 10) {
            do appendChar(c);
        } else {
            do addDigits(divided);
            do appendChar(c);
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
